name: klee
version: 'v3.0' # just for humans, typically '1.2+git' or '1.3.2'
summary:  KLEE Symbolic Execution Engine
architectures:
  - amd64
issues: https://github.com/marco6/klee/issues
description: |
  KLEE is a symbolic virtual machine built on top of the LLVM compiler 
  infrastructure. Currently, there are two primary components:

  - The core symbolic virtual machine engine; this is responsible for
    executing LLVM bitcode modules with support for symbolic values.
  - A POSIX/Linux emulation layer oriented towards supporting uClibc,
    with additional support for making parts of the operating system
    environment symbolic.

  Additionally, there is a simple library for replaying computed inputs
  on native code (for closed programs). There is also a more complicated
  infrastructure for replaying the inputs generated for the POSIX/Linux 
  emulation layer, which handles running native programs in an environment
  that matches a computed test input, including setting up files, pipes,
  environment variables, and passing command line arguments.

  For further information, see [klee hompage](http://klee.github.io).

base: core22
confinement: strict 

parts:
  stp:
    plugin: cmake
    cmake-parameters:
      - -DCMAKE_BUILD_TYPE=Release
      - -DENABLE_ASSERTIONS=OFF
      - -DSTATICCOMPILE=ON
    source-type: git
    source: https://github.com/stp/stp
    build-packages:
      - bison
      - flex
      - python-is-python3
      - python3
      - python3-pip
      - perl
      - minisat
      - libcryptominisat5-dev
      - zlib1g-dev
    prime:
      - -usr/local/bin
      - -usr/local/include
      - -usr/share
    override-pull: |
      craftctl default
      patch -p1 < $SNAPCRAFT_PROJECT_DIR/patches/stp.patch.diff

  klee-uclibc:
    plugin: nil
    source-type: git
    source: https://github.com/klee/klee-uclibc.git
    override-build: |
      cp --archive --link --no-dereference --update . "${SNAPCRAFT_PART_INSTALL}/uclibc"
      (cd "${SNAPCRAFT_PART_INSTALL}/uclibc" &&                                             \
        ./configure --make-llvm-lib --with-cc clang-13 --with-llvm-config llvm-config-13 && \
        make -j"${SNAPCRAFT_PARALLEL_BUILD_COUNT}")
    build-packages:
      - clang-13
      - llvm-13
      - llvm-13-dev
      - llvm-13-tools

    prime:
      - -uclibc

  klee:
    after:
      - stp
      - klee-uclibc
    plugin: cmake
    cmake-parameters:
      - -DENABLE_POSIX_RUNTIME=ON
      - -DENABLE_TCMALLOC=ON
      - -DENABLE_ZLIB=ON
      - -DKLEE_UCLIBC_PATH="${SNAPCRAFT_STAGE}/uclibc"
      - -DKLEE_RUNTIME_BUILD_TYPE="Release+Debug"
    source-type: tar
    source: https://github.com/klee/klee/archive/refs/tags/$SNAPCRAFT_PROJECT_VERSION.tar.gz
    override-build: |
      pip3 install lit wllvm
      craftctl default
    build-packages:
      - g++-multilib
      - gcc-multilib
      - libcap-dev
      - libgoogle-perftools-dev
      - libncurses5-dev
      - libsqlite3-dev
      - clang-13
      - llvm-13
      - llvm-13-dev
      - llvm-13-tools
      - libz3-dev # libz3-4
    stage-packages:
      - libtcmalloc-minimal4
      - libllvm13
      - libz3-4
      - libgoogle-perftools4
      - libunwind8
      - libsqlite3-0
    prime:
      - -usr/share
  scripts:
    source: scripts
    source-type: local
    plugin: nil
    override-build: |
      mkdir -p "${SNAPCRAFT_PART_INSTALL}/usr/local/bin/"
      cp --archive --link --no-dereference --update . "${SNAPCRAFT_PART_INSTALL}/usr/local/bin/"

apps:
  klee:
    command: usr/local/bin/klee
    plugs: [home]
  ktest-tool:
    command: usr/local/bin/ktest-tool
    plugs: [home]
  kleaver:
    command: usr/local/bin/kleaver
    plugs: [home]
  replay:
    command: usr/local/bin/klee-replay
    plugs: [home]
  stats:
    command: usr/local/bin/klee-stats
    plugs: [home]
  zesti:
    command: usr/local/bin/klee-zesti
    plugs: [home]
  ktest-gen:
    command: usr/local/bin/ktest-gen
    plugs: [home]
  ktest-randgen:
    command: usr/local/bin/ktest-randgen
    plugs: [home]
  env:
    command: usr/local/bin/env.sh
    completer: usr/local/bin/env.comp.sh
  run:
    command: usr/local/bin/run.sh
    plugs: [home]

